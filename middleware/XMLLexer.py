# Generated from XMLLexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,374,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
        4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,
        2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,
        7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,
        2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,
        7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,
        2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,0,1,
        0,1,0,1,0,5,0,97,8,0,10,0,12,0,100,9,0,1,0,1,0,1,0,1,0,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,117,8,1,10,1,12,1,120,9,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,4,3,134,8,3,11,3,
        12,3,135,1,3,1,3,1,3,1,3,1,3,1,3,1,3,4,3,145,8,3,11,3,12,3,146,1,
        3,1,3,3,3,151,8,3,1,4,1,4,3,4,155,8,4,1,4,4,4,158,8,4,11,4,12,4,
        159,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
        1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,9,4,9,197,8,9,11,9,12,9,198,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,
        14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,
        17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,
        22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,5,26,278,8,26,10,26,12,26,
        281,9,26,1,27,1,27,5,27,285,8,27,10,27,12,27,288,9,27,1,27,1,27,
        1,27,5,27,293,8,27,10,27,12,27,296,9,27,1,27,3,27,299,8,27,1,28,
        4,28,302,8,28,11,28,12,28,303,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,
        5,34,326,8,34,10,34,12,34,329,9,34,1,34,1,34,1,34,5,34,334,8,34,
        10,34,12,34,337,9,34,1,34,3,34,340,8,34,1,35,1,35,5,35,344,8,35,
        10,35,12,35,347,9,35,1,36,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,39,
        1,39,1,39,1,39,3,39,361,8,39,1,40,3,40,364,8,40,1,41,1,41,1,41,1,
        41,1,41,1,42,1,42,1,42,1,42,2,98,118,0,43,4,1,6,2,8,3,10,4,12,5,
        14,6,16,7,18,8,20,0,22,9,24,10,26,11,28,12,30,13,32,14,34,15,36,
        16,38,17,40,18,42,19,44,20,46,21,48,22,50,23,52,24,54,25,56,26,58,
        27,60,28,62,29,64,30,66,31,68,32,70,33,72,34,74,35,76,36,78,0,80,
        0,82,0,84,0,86,37,88,0,4,0,1,2,3,11,2,0,9,9,32,32,2,0,38,38,60,60,
        1,0,34,34,1,0,39,39,3,0,9,10,13,13,32,32,2,0,34,34,60,60,2,0,39,
        39,60,60,3,0,48,57,65,70,97,102,1,0,48,57,3,0,183,183,768,879,8255,
        8256,9,0,58,58,65,90,95,95,97,122,8304,8591,11264,12271,12289,55295,
        63744,64975,65008,65533,387,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,
        0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,
        0,20,1,0,0,0,0,22,1,0,0,0,1,24,1,0,0,0,1,26,1,0,0,0,1,28,1,0,0,0,
        1,30,1,0,0,0,1,32,1,0,0,0,1,34,1,0,0,0,1,36,1,0,0,0,1,38,1,0,0,0,
        1,40,1,0,0,0,1,42,1,0,0,0,1,44,1,0,0,0,1,46,1,0,0,0,1,48,1,0,0,0,
        1,50,1,0,0,0,1,52,1,0,0,0,1,54,1,0,0,0,1,56,1,0,0,0,1,58,1,0,0,0,
        1,60,1,0,0,0,2,62,1,0,0,0,2,64,1,0,0,0,2,66,1,0,0,0,2,68,1,0,0,0,
        2,70,1,0,0,0,2,72,1,0,0,0,2,74,1,0,0,0,2,76,1,0,0,0,3,86,1,0,0,0,
        3,88,1,0,0,0,4,90,1,0,0,0,6,105,1,0,0,0,8,125,1,0,0,0,10,150,1,0,
        0,0,12,157,1,0,0,0,14,161,1,0,0,0,16,173,1,0,0,0,18,177,1,0,0,0,
        20,187,1,0,0,0,22,196,1,0,0,0,24,200,1,0,0,0,26,212,1,0,0,0,28,223,
        1,0,0,0,30,227,1,0,0,0,32,229,1,0,0,0,34,231,1,0,0,0,36,235,1,0,
        0,0,38,242,1,0,0,0,40,248,1,0,0,0,42,250,1,0,0,0,44,252,1,0,0,0,
        46,254,1,0,0,0,48,256,1,0,0,0,50,258,1,0,0,0,52,260,1,0,0,0,54,268,
        1,0,0,0,56,275,1,0,0,0,58,298,1,0,0,0,60,301,1,0,0,0,62,305,1,0,
        0,0,64,309,1,0,0,0,66,314,1,0,0,0,68,319,1,0,0,0,70,321,1,0,0,0,
        72,339,1,0,0,0,74,341,1,0,0,0,76,348,1,0,0,0,78,352,1,0,0,0,80,354,
        1,0,0,0,82,360,1,0,0,0,84,363,1,0,0,0,86,365,1,0,0,0,88,370,1,0,
        0,0,90,91,5,60,0,0,91,92,5,33,0,0,92,93,5,45,0,0,93,94,5,45,0,0,
        94,98,1,0,0,0,95,97,9,0,0,0,96,95,1,0,0,0,97,100,1,0,0,0,98,99,1,
        0,0,0,98,96,1,0,0,0,99,101,1,0,0,0,100,98,1,0,0,0,101,102,5,45,0,
        0,102,103,5,45,0,0,103,104,5,62,0,0,104,5,1,0,0,0,105,106,5,60,0,
        0,106,107,5,33,0,0,107,108,5,91,0,0,108,109,5,67,0,0,109,110,5,68,
        0,0,110,111,5,65,0,0,111,112,5,84,0,0,112,113,5,65,0,0,113,114,5,
        91,0,0,114,118,1,0,0,0,115,117,9,0,0,0,116,115,1,0,0,0,117,120,1,
        0,0,0,118,119,1,0,0,0,118,116,1,0,0,0,119,121,1,0,0,0,120,118,1,
        0,0,0,121,122,5,93,0,0,122,123,5,93,0,0,123,124,5,62,0,0,124,7,1,
        0,0,0,125,126,5,38,0,0,126,127,3,74,35,0,127,128,5,59,0,0,128,9,
        1,0,0,0,129,130,5,38,0,0,130,131,5,35,0,0,131,133,1,0,0,0,132,134,
        3,80,38,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,
        1,0,0,0,136,137,1,0,0,0,137,138,5,59,0,0,138,151,1,0,0,0,139,140,
        5,38,0,0,140,141,5,35,0,0,141,142,5,120,0,0,142,144,1,0,0,0,143,
        145,3,78,37,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,0,146,
        147,1,0,0,0,147,148,1,0,0,0,148,149,5,59,0,0,149,151,1,0,0,0,150,
        129,1,0,0,0,150,139,1,0,0,0,151,11,1,0,0,0,152,158,7,0,0,0,153,155,
        5,13,0,0,154,153,1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,158,
        5,10,0,0,157,152,1,0,0,0,157,154,1,0,0,0,158,159,1,0,0,0,159,157,
        1,0,0,0,159,160,1,0,0,0,160,13,1,0,0,0,161,162,5,60,0,0,162,163,
        5,33,0,0,163,164,5,68,0,0,164,165,5,79,0,0,165,166,5,67,0,0,166,
        167,5,84,0,0,167,168,5,89,0,0,168,169,5,80,0,0,169,170,5,69,0,0,
        170,171,1,0,0,0,171,172,6,5,0,0,172,15,1,0,0,0,173,174,5,60,0,0,
        174,175,1,0,0,0,175,176,6,6,1,0,176,17,1,0,0,0,177,178,5,60,0,0,
        178,179,5,63,0,0,179,180,5,120,0,0,180,181,5,109,0,0,181,182,5,108,
        0,0,182,183,1,0,0,0,183,184,3,76,36,0,184,185,1,0,0,0,185,186,6,
        7,1,0,186,19,1,0,0,0,187,188,5,60,0,0,188,189,5,63,0,0,189,190,1,
        0,0,0,190,191,3,74,35,0,191,192,1,0,0,0,192,193,6,8,2,0,193,194,
        6,8,3,0,194,21,1,0,0,0,195,197,8,1,0,0,196,195,1,0,0,0,197,198,1,
        0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,23,1,0,0,0,200,201,5,60,
        0,0,201,202,5,33,0,0,202,203,5,69,0,0,203,204,5,76,0,0,204,205,5,
        69,0,0,205,206,5,77,0,0,206,207,5,69,0,0,207,208,5,78,0,0,208,209,
        5,84,0,0,209,210,1,0,0,0,210,211,6,10,0,0,211,25,1,0,0,0,212,213,
        5,60,0,0,213,214,5,33,0,0,214,215,5,69,0,0,215,216,5,78,0,0,216,
        217,5,84,0,0,217,218,5,73,0,0,218,219,5,84,0,0,219,220,5,89,0,0,
        220,221,1,0,0,0,221,222,6,11,0,0,222,27,1,0,0,0,223,224,5,62,0,0,
        224,225,1,0,0,0,225,226,6,12,4,0,226,29,1,0,0,0,227,228,5,91,0,0,
        228,31,1,0,0,0,229,230,5,93,0,0,230,33,1,0,0,0,231,232,5,65,0,0,
        232,233,5,78,0,0,233,234,5,89,0,0,234,35,1,0,0,0,235,236,5,83,0,
        0,236,237,5,89,0,0,237,238,5,83,0,0,238,239,5,84,0,0,239,240,5,69,
        0,0,240,241,5,77,0,0,241,37,1,0,0,0,242,243,5,69,0,0,243,244,5,77,
        0,0,244,245,5,80,0,0,245,246,5,84,0,0,246,247,5,89,0,0,247,39,1,
        0,0,0,248,249,5,40,0,0,249,41,1,0,0,0,250,251,5,41,0,0,251,43,1,
        0,0,0,252,253,5,124,0,0,253,45,1,0,0,0,254,255,5,37,0,0,255,47,1,
        0,0,0,256,257,5,59,0,0,257,49,1,0,0,0,258,259,5,42,0,0,259,51,1,
        0,0,0,260,261,5,35,0,0,261,262,5,80,0,0,262,263,5,67,0,0,263,264,
        5,68,0,0,264,265,5,65,0,0,265,266,5,84,0,0,266,267,5,65,0,0,267,
        53,1,0,0,0,268,269,5,80,0,0,269,270,5,85,0,0,270,271,5,66,0,0,271,
        272,5,76,0,0,272,273,5,73,0,0,273,274,5,67,0,0,274,55,1,0,0,0,275,
        279,3,84,40,0,276,278,3,82,39,0,277,276,1,0,0,0,278,281,1,0,0,0,
        279,277,1,0,0,0,279,280,1,0,0,0,280,57,1,0,0,0,281,279,1,0,0,0,282,
        286,5,34,0,0,283,285,8,2,0,0,284,283,1,0,0,0,285,288,1,0,0,0,286,
        284,1,0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,286,1,0,0,0,289,
        299,5,34,0,0,290,294,5,39,0,0,291,293,8,3,0,0,292,291,1,0,0,0,293,
        296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,
        294,1,0,0,0,297,299,5,39,0,0,298,282,1,0,0,0,298,290,1,0,0,0,299,
        59,1,0,0,0,300,302,7,4,0,0,301,300,1,0,0,0,302,303,1,0,0,0,303,301,
        1,0,0,0,303,304,1,0,0,0,304,61,1,0,0,0,305,306,5,62,0,0,306,307,
        1,0,0,0,307,308,6,29,4,0,308,63,1,0,0,0,309,310,5,63,0,0,310,311,
        5,62,0,0,311,312,1,0,0,0,312,313,6,30,4,0,313,65,1,0,0,0,314,315,
        5,47,0,0,315,316,5,62,0,0,316,317,1,0,0,0,317,318,6,31,4,0,318,67,
        1,0,0,0,319,320,5,47,0,0,320,69,1,0,0,0,321,322,5,61,0,0,322,71,
        1,0,0,0,323,327,5,34,0,0,324,326,8,5,0,0,325,324,1,0,0,0,326,329,
        1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,327,
        1,0,0,0,330,340,5,34,0,0,331,335,5,39,0,0,332,334,8,6,0,0,333,332,
        1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,338,
        1,0,0,0,337,335,1,0,0,0,338,340,5,39,0,0,339,323,1,0,0,0,339,331,
        1,0,0,0,340,73,1,0,0,0,341,345,3,84,40,0,342,344,3,82,39,0,343,342,
        1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,75,1,
        0,0,0,347,345,1,0,0,0,348,349,7,4,0,0,349,350,1,0,0,0,350,351,6,
        36,5,0,351,77,1,0,0,0,352,353,7,7,0,0,353,79,1,0,0,0,354,355,7,8,
        0,0,355,81,1,0,0,0,356,361,3,84,40,0,357,361,2,45,46,0,358,361,3,
        80,38,0,359,361,7,9,0,0,360,356,1,0,0,0,360,357,1,0,0,0,360,358,
        1,0,0,0,360,359,1,0,0,0,361,83,1,0,0,0,362,364,7,10,0,0,363,362,
        1,0,0,0,364,85,1,0,0,0,365,366,5,63,0,0,366,367,5,62,0,0,367,368,
        1,0,0,0,368,369,6,41,4,0,369,87,1,0,0,0,370,371,9,0,0,0,371,372,
        1,0,0,0,372,373,6,42,2,0,373,89,1,0,0,0,24,0,1,2,3,98,118,135,146,
        150,154,157,159,198,279,286,294,298,303,327,335,339,345,360,363,
        6,5,1,0,5,2,0,3,0,0,5,3,0,4,0,0,6,0,0
    ]

class XMLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DTD = 1
    INSIDE = 2
    PROC_INSTR = 3

    COMMENT = 1
    CDATA = 2
    EntityRef = 3
    CharRef = 4
    SEA_WS = 5
    DOCTYPE = 6
    OPEN = 7
    XMLDeclOpen = 8
    TEXT = 9
    ELEMENT = 10
    ENTITY = 11
    GT = 12
    LBRACK = 13
    RBRACK = 14
    ANY = 15
    SYSTEM = 16
    EMPTY = 17
    LPAREN = 18
    RPAREN = 19
    PIPE = 20
    PERCENT = 21
    SEMI = 22
    ASTERISK = 23
    PCDATA = 24
    PUBLIC = 25
    DTDName = 26
    DTDSTRING = 27
    DTD_WS = 28
    CLOSE = 29
    SPECIAL_CLOSE = 30
    SLASH_CLOSE = 31
    SLASH = 32
    EQUALS = 33
    STRING = 34
    Name = 35
    S = 36
    PI = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "DTD", "INSIDE", "PROC_INSTR" ]

    literalNames = [ "<INVALID>",
            "'<!DOCTYPE'", "'<'", "'<!ELEMENT'", "'<!ENTITY'", "'['", "']'", 
            "'ANY'", "'SYSTEM'", "'EMPTY'", "'('", "')'", "'|'", "'%'", 
            "';'", "'*'", "'#PCDATA'", "'PUBLIC'", "'/>'", "'/'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "CDATA", "EntityRef", "CharRef", "SEA_WS", "DOCTYPE", 
            "OPEN", "XMLDeclOpen", "TEXT", "ELEMENT", "ENTITY", "GT", "LBRACK", 
            "RBRACK", "ANY", "SYSTEM", "EMPTY", "LPAREN", "RPAREN", "PIPE", 
            "PERCENT", "SEMI", "ASTERISK", "PCDATA", "PUBLIC", "DTDName", 
            "DTDSTRING", "DTD_WS", "CLOSE", "SPECIAL_CLOSE", "SLASH_CLOSE", 
            "SLASH", "EQUALS", "STRING", "Name", "S", "PI" ]

    ruleNames = [ "COMMENT", "CDATA", "EntityRef", "CharRef", "SEA_WS", 
                  "DOCTYPE", "OPEN", "XMLDeclOpen", "SPECIAL_OPEN", "TEXT", 
                  "ELEMENT", "ENTITY", "GT", "LBRACK", "RBRACK", "ANY", 
                  "SYSTEM", "EMPTY", "LPAREN", "RPAREN", "PIPE", "PERCENT", 
                  "SEMI", "ASTERISK", "PCDATA", "PUBLIC", "DTDName", "DTDSTRING", 
                  "DTD_WS", "CLOSE", "SPECIAL_CLOSE", "SLASH_CLOSE", "SLASH", 
                  "EQUALS", "STRING", "Name", "S", "HEXDIGIT", "DIGIT", 
                  "NameChar", "NameStartChar", "PI", "IGNORE" ]

    grammarFileName = "XMLLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


